import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
export declare class Webhook extends ClientSDK {
    /**
     * Retrieve a Webhook
     */
    getAll(options?: RequestOptions): Promise<operations.GetWebhooksResponse>;
    /**
     * Create a webhook
     *
     * @remarks
     * To create a new webhook, you need to make an API call with the events you want to listen for and the URL that will be called when those events occur.
     */
    create(request: components.WebhookInput, options?: RequestOptions): Promise<operations.CreateWebhookResponse>;
    /**
     * Retrieve a webhook
     */
    get(id: string, options?: RequestOptions): Promise<operations.GetWebhookResponse>;
    /**
     * Update a webhook
     */
    update(id: string, webhook: components.WebhookInput, options?: RequestOptions): Promise<operations.UpdateWebhookResponse>;
    /**
     * Delete a webhook
     */
    delete(id: string, options?: RequestOptions): Promise<operations.DeleteWebhookResponse>;
    /**
     * Retrieve webhook logs
     */
    getLogs(id: string, options?: RequestOptions): Promise<operations.GetWebhookLogsResponse>;
    /**
     * Retrieve a webhook log
     */
    getLog(id: string, logId: string, options?: RequestOptions): Promise<operations.GetWebhookLogResponse>;
    /**
     * Resend a webhook
     *
     * @remarks
     * Use this API to resend the same webhook request. This is useful when
     * developing and debugging, allowing you to easily repeat the same webhook
     * to check or fix the behaviour in your handler.
     */
    resendLog(id: string, logId: string, options?: RequestOptions): Promise<operations.ResendWebhookResponse>;
}
//# sourceMappingURL=webhook.d.ts.map