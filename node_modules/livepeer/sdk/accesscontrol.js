"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessControl = void 0;
const accessControlCreate_js_1 = require("../funcs/accessControlCreate.js");
const accessControlDelete_js_1 = require("../funcs/accessControlDelete.js");
const accessControlGet_js_1 = require("../funcs/accessControlGet.js");
const accessControlGetAll_js_1 = require("../funcs/accessControlGetAll.js");
const accessControlUpdate_js_1 = require("../funcs/accessControlUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class AccessControl extends sdks_js_1.ClientSDK {
    /**
     * Create a signing key
     *
     * @remarks
     * The publicKey is a representation of the public key, encoded as base 64 and is passed as a string, and  the privateKey is displayed only on creation. This is the only moment where the client can save the private key, otherwise it will be lost. Remember to decode your string when signing JWTs.
     * Up to 10 signing keys can be generated, after that you must delete at least one signing key to create a new one.
     */
    async create(options) {
        return (0, fp_js_1.unwrapAsync)((0, accessControlCreate_js_1.accessControlCreate)(this, options));
    }
    /**
     * Retrieves signing keys
     */
    async getAll(options) {
        return (0, fp_js_1.unwrapAsync)((0, accessControlGetAll_js_1.accessControlGetAll)(this, options));
    }
    /**
     * Delete Signing Key
     */
    async delete(keyId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accessControlDelete_js_1.accessControlDelete)(this, keyId, options));
    }
    /**
     * Retrieves a signing key
     */
    async get(keyId, options) {
        return (0, fp_js_1.unwrapAsync)((0, accessControlGet_js_1.accessControlGet)(this, keyId, options));
    }
    /**
     * Update a signing key
     */
    async update(keyId, requestBody, options) {
        return (0, fp_js_1.unwrapAsync)((0, accessControlUpdate_js_1.accessControlUpdate)(this, keyId, requestBody, options));
    }
}
exports.AccessControl = AccessControl;
//# sourceMappingURL=accesscontrol.js.map