import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
export declare class AccessControl extends ClientSDK {
    /**
     * Create a signing key
     *
     * @remarks
     * The publicKey is a representation of the public key, encoded as base 64 and is passed as a string, and  the privateKey is displayed only on creation. This is the only moment where the client can save the private key, otherwise it will be lost. Remember to decode your string when signing JWTs.
     * Up to 10 signing keys can be generated, after that you must delete at least one signing key to create a new one.
     */
    create(options?: RequestOptions): Promise<operations.CreateSigningKeyResponse>;
    /**
     * Retrieves signing keys
     */
    getAll(options?: RequestOptions): Promise<operations.GetSigningKeysResponse>;
    /**
     * Delete Signing Key
     */
    delete(keyId: string, options?: RequestOptions): Promise<operations.DeleteSigningKeyResponse>;
    /**
     * Retrieves a signing key
     */
    get(keyId: string, options?: RequestOptions): Promise<operations.GetSigningKeyResponse>;
    /**
     * Update a signing key
     */
    update(keyId: string, requestBody: operations.UpdateSigningKeyRequestBody, options?: RequestOptions): Promise<operations.UpdateSigningKeyResponse>;
}
//# sourceMappingURL=accesscontrol.d.ts.map