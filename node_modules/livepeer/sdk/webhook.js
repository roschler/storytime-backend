"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
const webhookCreate_js_1 = require("../funcs/webhookCreate.js");
const webhookDelete_js_1 = require("../funcs/webhookDelete.js");
const webhookGet_js_1 = require("../funcs/webhookGet.js");
const webhookGetAll_js_1 = require("../funcs/webhookGetAll.js");
const webhookGetLog_js_1 = require("../funcs/webhookGetLog.js");
const webhookGetLogs_js_1 = require("../funcs/webhookGetLogs.js");
const webhookResendLog_js_1 = require("../funcs/webhookResendLog.js");
const webhookUpdate_js_1 = require("../funcs/webhookUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Webhook extends sdks_js_1.ClientSDK {
    /**
     * Retrieve a Webhook
     */
    async getAll(options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookGetAll_js_1.webhookGetAll)(this, options));
    }
    /**
     * Create a webhook
     *
     * @remarks
     * To create a new webhook, you need to make an API call with the events you want to listen for and the URL that will be called when those events occur.
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookCreate_js_1.webhookCreate)(this, request, options));
    }
    /**
     * Retrieve a webhook
     */
    async get(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookGet_js_1.webhookGet)(this, id, options));
    }
    /**
     * Update a webhook
     */
    async update(id, webhook, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookUpdate_js_1.webhookUpdate)(this, id, webhook, options));
    }
    /**
     * Delete a webhook
     */
    async delete(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookDelete_js_1.webhookDelete)(this, id, options));
    }
    /**
     * Retrieve webhook logs
     */
    async getLogs(id, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookGetLogs_js_1.webhookGetLogs)(this, id, options));
    }
    /**
     * Retrieve a webhook log
     */
    async getLog(id, logId, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookGetLog_js_1.webhookGetLog)(this, id, logId, options));
    }
    /**
     * Resend a webhook
     *
     * @remarks
     * Use this API to resend the same webhook request. This is useful when
     * developing and debugging, allowing you to easily repeat the same webhook
     * to check or fix the behaviour in your handler.
     */
    async resendLog(id, logId, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhookResendLog_js_1.webhookResendLog)(this, id, logId, options));
    }
}
exports.Webhook = Webhook;
//# sourceMappingURL=webhook.js.map