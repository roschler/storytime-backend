import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
export declare class Room extends ClientSDK {
    /**
     * Create a room
     *
     * @remarks
     * Create a multiparticipant livestreaming room.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    create(options?: RequestOptions): Promise<operations.CreateRoomResponse>;
    /**
     * Retrieve a room
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    get(id: string, options?: RequestOptions): Promise<operations.GetRoomResponse>;
    /**
     * Delete a room
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    delete(id: string, options?: RequestOptions): Promise<operations.DeleteRoomResponse>;
    /**
     * Start room RTMP egress
     *
     * @remarks
     * Create a livestream for your room.
     * This allows you to leverage livestreaming features like recording and HLS output.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    startEgress(id: string, roomEgressPayload: components.RoomEgressPayload, options?: RequestOptions): Promise<operations.StartRoomEgressResponse>;
    /**
     * Stop room RTMP egress
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    stopEgress(id: string, options?: RequestOptions): Promise<operations.StopRoomEgressResponse>;
    /**
     * Create a room user
     *
     * @remarks
     * Call this endpoint to add a user to a room, specifying a display name at a minimum.
     * The response will contain a joining URL for Livepeer's default meeting app.
     * Alternatively the joining token can be used with a custom app.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    createUser(id: string, roomUserPayload: components.RoomUserPayload, options?: RequestOptions): Promise<operations.CreateRoomUserResponse>;
    /**
     * Get user details
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    getUser(id: string, userId: string, options?: RequestOptions): Promise<operations.GetRoomUserResponse>;
    /**
     * Update a room user
     *
     * @remarks
     * Update properties for a user.
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    updateUser(id: string, userId: string, roomUserUpdatePayload: components.RoomUserUpdatePayload, options?: RequestOptions): Promise<operations.UpdateRoomUserResponse>;
    /**
     * Remove a user from the room
     *
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    deleteUser(id: string, userId: string, options?: RequestOptions): Promise<operations.DeleteRoomUserResponse>;
}
//# sourceMappingURL=room.d.ts.map