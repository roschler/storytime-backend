import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
export declare class Metrics extends ClientSDK {
    /**
     * Query realtime viewership
     *
     * @remarks
     * Requires a private (non-CORS) API key to be used.
     */
    getRealtimeViewership(playbackId?: string | undefined, creatorId?: string | undefined, breakdownBy?: Array<operations.BreakdownBy> | undefined, options?: RequestOptions): Promise<operations.GetRealtimeViewershipNowResponse>;
    /**
     * Query viewership metrics
     *
     * @remarks
     * Requires a private (non-CORS) API key to be used.
     */
    getViewership(request: operations.GetViewershipMetricsRequest, options?: RequestOptions): Promise<operations.GetViewershipMetricsResponse>;
    /**
     * Query creator viewership metrics
     *
     * @remarks
     * Requires a proof of ownership to be sent in the request, which for now is just the assetId or streamId parameters (1 of those must be in the query-string).
     */
    getCreatorViewership(request: operations.GetCreatorViewershipMetricsRequest, options?: RequestOptions): Promise<operations.GetCreatorViewershipMetricsResponse>;
    /**
     * Query public total views metrics
     *
     * @remarks
     * Allows querying for the public metrics for viewership about a video.
     * This can be called from the frontend with a CORS key, or even
     * unauthenticated.
     */
    getPublicViewership(playbackId: string, options?: RequestOptions): Promise<operations.GetPublicViewershipMetricsResponse>;
    /**
     * Query usage metrics
     */
    getUsage(request: operations.GetUsageMetricsRequest, options?: RequestOptions): Promise<operations.GetUsageMetricsResponse>;
}
//# sourceMappingURL=metrics.d.ts.map