"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metrics = void 0;
const metricsGetCreatorViewership_js_1 = require("../funcs/metricsGetCreatorViewership.js");
const metricsGetPublicViewership_js_1 = require("../funcs/metricsGetPublicViewership.js");
const metricsGetRealtimeViewership_js_1 = require("../funcs/metricsGetRealtimeViewership.js");
const metricsGetUsage_js_1 = require("../funcs/metricsGetUsage.js");
const metricsGetViewership_js_1 = require("../funcs/metricsGetViewership.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Metrics extends sdks_js_1.ClientSDK {
    /**
     * Query realtime viewership
     *
     * @remarks
     * Requires a private (non-CORS) API key to be used.
     */
    async getRealtimeViewership(playbackId, creatorId, breakdownBy, options) {
        return (0, fp_js_1.unwrapAsync)((0, metricsGetRealtimeViewership_js_1.metricsGetRealtimeViewership)(this, playbackId, creatorId, breakdownBy, options));
    }
    /**
     * Query viewership metrics
     *
     * @remarks
     * Requires a private (non-CORS) API key to be used.
     */
    async getViewership(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metricsGetViewership_js_1.metricsGetViewership)(this, request, options));
    }
    /**
     * Query creator viewership metrics
     *
     * @remarks
     * Requires a proof of ownership to be sent in the request, which for now is just the assetId or streamId parameters (1 of those must be in the query-string).
     */
    async getCreatorViewership(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metricsGetCreatorViewership_js_1.metricsGetCreatorViewership)(this, request, options));
    }
    /**
     * Query public total views metrics
     *
     * @remarks
     * Allows querying for the public metrics for viewership about a video.
     * This can be called from the frontend with a CORS key, or even
     * unauthenticated.
     */
    async getPublicViewership(playbackId, options) {
        return (0, fp_js_1.unwrapAsync)((0, metricsGetPublicViewership_js_1.metricsGetPublicViewership)(this, playbackId, options));
    }
    /**
     * Query usage metrics
     */
    async getUsage(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, metricsGetUsage_js_1.metricsGetUsage)(this, request, options));
    }
}
exports.Metrics = Metrics;
//# sourceMappingURL=metrics.js.map