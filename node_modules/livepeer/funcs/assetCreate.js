"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assetCreate = assetCreate;
const encodings_js_1 = require("../lib/encodings.js");
const m$ = __importStar(require("../lib/matchers.js"));
const schemas$ = __importStar(require("../lib/schemas.js"));
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const components = __importStar(require("../models/components/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
/**
 * Upload an asset
 *
 * @remarks
 * To upload an asset, your first need to request for a direct upload URL
 * and only then actually upload the contents of the asset.
 * \
 * \
 * Once you created a upload link, you have 2 options, resumable or direct
 * upload. For a more reliable experience, you should use resumable uploads
 * which will work better for users with unreliable or slow network
 * connections. If you want a simpler implementation though, you should
 * just use a direct upload.
 *
 * ## Direct Upload
 * For a direct upload, make a PUT request to the URL received in the url
 * field of the response above, with the raw video file as the request
 * body. response above:
 *
 * ## Resumable Upload
 * Livepeer supports resumable uploads via Tus. This section provides a
 * simple example of how to use tus-js-client to upload a video file.
 * \
 * \
 * From the previous section, we generated a URL to upload a video file to
 * Livepeer on POST /api/asset/request-upload. You should use the
 * tusEndpoint field of the response to upload the video file and track the
 * progress:
 *
 * ```
 * # This assumes there is an `input` element of `type="file"` with id
 * `fileInput` in the HTML
 *
 * const input = document.getElementById('fileInput');
 *
 * const file = input.files[0];
 *
 * const upload = new tus.Upload(file, {
 *   endpoint: tusEndpoint, // URL from `tusEndpoint` field in the
 * `/request-upload` response
 *   metadata: {
 *     filename,
 *     filetype: 'video/mp4',
 *   },
 *   uploadSize: file.size,
 *   onError(err) {
 *     console.error('Error uploading file:', err);
 *   },
 *   onProgress(bytesUploaded, bytesTotal) {
 *     const percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2);
 *     console.log('Uploaded ' + percentage + '%');
 *   },
 *   onSuccess() {
 *     console.log('Upload finished:', upload.url);
 *   },
 * });
 *
 * const previousUploads = await upload.findPreviousUploads();
 *
 * if (previousUploads.length > 0) {
 *   upload.resumeFromPreviousUpload(previousUploads[0]);
 * }
 *
 * upload.start();
 *
 * ```
 *
 * > Note: If you are using tus from node.js, you need to add a custom URL
 * storage to enable resuming from previous uploads. On the browser, this
 * is enabled by default using local storage. In node.js, add urlStorage:
 * new tus.FileUrlStorage("path/to/tmp/file"), to the UploadFile object
 * definition above.
 */
async function assetCreate(client$, request, options) {
    var _a;
    const input$ = request;
    const parsed$ = schemas$.safeParse(input$, (value$) => components.NewAssetPayload$outboundSchema.parse(value$), "Input validation failed");
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = (0, encodings_js_1.encodeJSON)("body", payload$, { explode: true });
    const path$ = (0, url_js_1.pathToFunc)("/asset/request-upload")();
    const headers$ = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json",
    });
    const apiKey$ = await (0, security_js_1.extractSecurity)(client$.options$.apiKey);
    const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
    const context = {
        operationID: "requestUpload",
        oAuth2Scopes: [],
        securitySource: client$.options$.apiKey,
    };
    const securitySettings$ = (0, security_js_1.resolveGlobalSecurity)(security$);
    const requestRes = client$.createRequest$(context, {
        security: securitySettings$,
        method: "POST",
        path: path$,
        headers: headers$,
        body: body$,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client$.options$.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;
    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries)
            || client$.options$.retryConfig,
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields$ = {
        ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };
    const [result$] = await m$.match(m$.json(200, operations.RequestUploadResponse$inboundSchema, {
        key: "data",
    }), m$.fail(["4XX", "5XX"]), m$.json("default", operations.RequestUploadResponse$inboundSchema, {
        key: "error",
    }))(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }
    return result$;
}
//# sourceMappingURL=assetCreate.js.map