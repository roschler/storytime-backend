import { LivepeerCore } from "../core.js";
import { RequestOptions } from "../lib/sdks.js";
import { ConnectionError, InvalidRequestError, RequestAbortedError, RequestTimeoutError, UnexpectedClientError } from "../models/errors/httpclienterrors.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";
/**
 * Terminates a live stream
 *
 * @remarks
 * `DELETE /stream/{id}/terminate` can be used to terminate an ongoing
 * session on a live stream. Unlike suspending the stream, it allows the
 * streamer to restart streaming even immediately, but it will force
 * terminate the current session and stop the recording.
 * \
 * \
 * A 204 No Content status response indicates the stream was successfully
 * terminated.
 */
export declare function streamTerminate(client$: LivepeerCore, id: string, options?: RequestOptions): Promise<Result<operations.TerminateStreamResponse, SDKError | SDKValidationError | UnexpectedClientError | InvalidRequestError | RequestAbortedError | RequestTimeoutError | ConnectionError>>;
//# sourceMappingURL=streamTerminate.d.ts.map