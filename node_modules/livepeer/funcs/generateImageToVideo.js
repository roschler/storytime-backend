"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateImageToVideo = generateImageToVideo;
const files_js_1 = require("../lib/files.js");
const m$ = __importStar(require("../lib/matchers.js"));
const schemas$ = __importStar(require("../lib/schemas.js"));
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const components = __importStar(require("../models/components/index.js"));
const errors = __importStar(require("../models/errors/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
const blobs_js_1 = require("../types/blobs.js");
const streams_js_1 = require("../types/streams.js");
/**
 * Image To Video
 *
 * @remarks
 * Generate a video from a provided image.
 */
async function generateImageToVideo(client$, request, options) {
    var _a;
    const input$ = request;
    const parsed$ = schemas$.safeParse(input$, (value$) => components.BodyGenImageToVideo$outboundSchema.parse(value$), "Input validation failed");
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = new FormData();
    if ((0, blobs_js_1.isBlobLike)(payload$.image)) {
        body$.append("image", payload$.image);
    }
    else if ((0, streams_js_1.isReadableStream)(payload$.image.content)) {
        const buffer = await (0, files_js_1.readableStreamToArrayBuffer)(payload$.image.content);
        const blob = new Blob([buffer], { type: "application/octet-stream" });
        body$.append("image", blob);
    }
    else {
        body$.append("image", new Blob([payload$.image.content], { type: "application/octet-stream" }), payload$.image.fileName);
    }
    if (payload$.fps !== undefined) {
        body$.append("fps", String(payload$.fps));
    }
    if (payload$.height !== undefined) {
        body$.append("height", String(payload$.height));
    }
    if (payload$.model_id !== undefined) {
        body$.append("model_id", payload$.model_id);
    }
    if (payload$.motion_bucket_id !== undefined) {
        body$.append("motion_bucket_id", String(payload$.motion_bucket_id));
    }
    if (payload$.noise_aug_strength !== undefined) {
        body$.append("noise_aug_strength", String(payload$.noise_aug_strength));
    }
    if (payload$.num_inference_steps !== undefined) {
        body$.append("num_inference_steps", String(payload$.num_inference_steps));
    }
    if (payload$.safety_check !== undefined) {
        body$.append("safety_check", String(payload$.safety_check));
    }
    if (payload$.seed !== undefined) {
        body$.append("seed", String(payload$.seed));
    }
    if (payload$.width !== undefined) {
        body$.append("width", String(payload$.width));
    }
    const path$ = (0, url_js_1.pathToFunc)("/api/beta/generate/image-to-video")();
    const headers$ = new Headers({
        Accept: "application/json",
    });
    const apiKey$ = await (0, security_js_1.extractSecurity)(client$.options$.apiKey);
    const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
    const context = {
        operationID: "genImageToVideo",
        oAuth2Scopes: [],
        securitySource: client$.options$.apiKey,
    };
    const securitySettings$ = (0, security_js_1.resolveGlobalSecurity)(security$);
    const requestRes = client$.createRequest$(context, {
        security: securitySettings$,
        method: "POST",
        path: path$,
        headers: headers$,
        body: body$,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client$.options$.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;
    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["400", "401", "422", "4XX", "500", "5XX"],
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries)
            || client$.options$.retryConfig,
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields$ = {
        ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };
    const [result$] = await m$.match(m$.json(200, operations.GenImageToVideoResponse$inboundSchema, {
        key: "VideoResponse",
    }), m$.jsonErr(400, errors.GenImageToVideoResponseBody$inboundSchema), m$.jsonErr(401, errors.GenImageToVideoGenerateResponseBody$inboundSchema), m$.jsonErr(422, errors.GenImageToVideoGenerateResponseResponseBody$inboundSchema), m$.jsonErr(500, errors.GenImageToVideoGenerateResponse500ResponseBody$inboundSchema), m$.fail(["4XX", "5XX"]), m$.json("default", operations.GenImageToVideoResponse$inboundSchema, {
        key: "studio-api-error",
    }))(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }
    return result$;
}
//# sourceMappingURL=generateImageToVideo.js.map