"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transcodeCreate = transcodeCreate;
const encodings_js_1 = require("../lib/encodings.js");
const m$ = __importStar(require("../lib/matchers.js"));
const schemas$ = __importStar(require("../lib/schemas.js"));
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const components = __importStar(require("../models/components/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
/**
 * Transcode a video
 *
 * @remarks
 * `POST /transcode` transcodes a video file and uploads the results to the
 * specified storage service.
 * \
 * \
 * Transcoding is asynchronous so you will need to check the status of the
 * task in order to determine when transcoding is complete. The `id` field
 * in the response is the unique ID for the transcoding `Task`. The task
 * status can be queried using the [GET tasks
 * endpoint](https://docs.livepeer.org/reference/api/get-tasks):
 * \
 * \
 * When `status.phase` is `completed`,  transcoding will be complete and
 * the results will be stored in the storage service and the specified
 * output location.
 * \
 * \
 * The results will be available under `params.outputs.hls.path` and
 * `params.outputs.mp4.path` in the specified storage service.
 * ## Input
 * \
 * This endpoint currently supports the following inputs:
 * - HTTP
 * - S3 API Compatible Service
 * \
 * \
 * **HTTP**
 * \
 * A public HTTP URL can be used to read a video file.
 * ```json
 * {
 *     "url": "https://www.example.com/video.mp4"
 * }
 * ```
 * | Name | Type   | Description                          |
 * | ---- | ------ | ------------------------------------ |
 * | url  | string | A public HTTP URL for the video file. |
 *
 * Note: For IPFS HTTP gateway URLs, the API currently only supports “path
 * style” URLs and does not support “subdomain style” URLs. The API will
 * support both styles of URLs in a future update.
 * \
 * \
 * **S3 API Compatible Service**
 * \
 * \
 * S3 credentials can be used to authenticate with a S3 API compatible
 * service to read a video file.
 *
 * ```json
 * {
 *     "type": "s3",
 *     "endpoint": "https://gateway.storjshare.io",
 *     "credentials": {
 *         "accessKeyId": "$ACCESS_KEY_ID",
 *         "secretAccessKey": "$SECRET_ACCESS_KEY"
 *     },
 *     "bucket": "inbucket",
 *     "path": "/video/source.mp4"
 * }
 * ```
 *
 * ## Storage
 * \
 * This endpoint currently supports the following storage services:
 * - S3 API Compatible Service
 * - Web3 Storage
 * \
 * \
 * **S3 API Compatible Service**
 * ```json
 * {
 *   "type": "s3",
 *     "endpoint": "https://gateway.storjshare.io",
 *     "credentials": {
 *         "accessKeyId": "$ACCESS_KEY_ID",
 *         "secretAccessKey": "$SECRET_ACCESS_KEY"
 *     },
 *     "bucket": "mybucket"
 * }
 * ```
 *
 * **Web3 Storage**
 *
 * ```json
 * {
 *   "type": "web3.storage",
 *     "credentials": {
 *         "proof": "$UCAN_DELEGATION_PROOF",
 *     }
 * }
 * ```
 *
 * ## Outputs
 * \
 * This endpoint currently supports the following output types:
 * - HLS
 * - MP4
 *
 * **HLS**
 *
 * ```json
 * {
 *   "hls": {
 *         "path": "/samplevideo/hls"
 *     }
 * }
 * ```
 *
 * **MP4**
 *
 * ```json
 * {
 *   "mp4": {
 *         "path": "/samplevideo/mp4"
 *     }
 * }
 * ```
 */
async function transcodeCreate(client$, request, options) {
    var _a;
    const input$ = request;
    const parsed$ = schemas$.safeParse(input$, (value$) => components.TranscodePayload$outboundSchema.parse(value$), "Input validation failed");
    if (!parsed$.ok) {
        return parsed$;
    }
    const payload$ = parsed$.value;
    const body$ = (0, encodings_js_1.encodeJSON)("body", payload$, { explode: true });
    const path$ = (0, url_js_1.pathToFunc)("/transcode")();
    const headers$ = new Headers({
        "Content-Type": "application/json",
        Accept: "application/json",
    });
    const apiKey$ = await (0, security_js_1.extractSecurity)(client$.options$.apiKey);
    const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
    const context = {
        operationID: "transcodeVideo",
        oAuth2Scopes: [],
        securitySource: client$.options$.apiKey,
    };
    const securitySettings$ = (0, security_js_1.resolveGlobalSecurity)(security$);
    const requestRes = client$.createRequest$(context, {
        security: securitySettings$,
        method: "POST",
        path: path$,
        headers: headers$,
        body: body$,
        timeoutMs: (options === null || options === void 0 ? void 0 : options.timeoutMs) || client$.options$.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const request$ = requestRes.value;
    const doResult = await client$.do$(request$, {
        context,
        errorCodes: ["4XX", "5XX"],
        retryConfig: (options === null || options === void 0 ? void 0 : options.retries)
            || client$.options$.retryConfig,
        retryCodes: (options === null || options === void 0 ? void 0 : options.retryCodes) || ["429", "500", "502", "503", "504"],
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const responseFields$ = {
        ContentType: (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "application/octet-stream",
        StatusCode: response.status,
        RawResponse: response,
        Headers: {},
    };
    const [result$] = await m$.match(m$.json(200, operations.TranscodeVideoResponse$inboundSchema, {
        key: "task",
    }), m$.fail(["4XX", "5XX"]), m$.json("default", operations.TranscodeVideoResponse$inboundSchema, {
        key: "error",
    }))(response, { extraFields: responseFields$ });
    if (!result$.ok) {
        return result$;
    }
    return result$;
}
//# sourceMappingURL=transcodeCreate.js.map